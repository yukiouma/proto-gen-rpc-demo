// Code generated by protoc-gen-mk. DO NOT EDIT.
package v1

import (
	"log"
	"net"
	"net/rpc"
)

type LoginRequest struct {
	Account  string
	Password string
}

func NewLoginRequest() *LoginRequest {
	return &LoginRequest{}
}

func (m *LoginRequest) GetAccount() (data string) {
	if m == nil {
		return
	}
	data = m.Account
	return
}

func (m *LoginRequest) SetAccount(val string) {
	if m == nil {
		return
	}
	m.Account = val
}

func (m *LoginRequest) GetPassword() (data string) {
	if m == nil {
		return
	}
	data = m.Password
	return
}

func (m *LoginRequest) SetPassword(val string) {
	if m == nil {
		return
	}
	m.Password = val
}

type LoginReply struct {
	User *User
}

func NewLoginReply() *LoginReply {
	return &LoginReply{}
}

func (m *LoginReply) GetUser() (data *User) {
	if m == nil {
		return
	}
	data = m.User
	return
}

func (m *LoginReply) SetUser(val *User) {
	if m == nil {
		return
	}
	m.User = val
}

type LogoutRequest struct {
}

func NewLogoutRequest() *LogoutRequest {
	return &LogoutRequest{}
}

type LogoutReply struct {
}

func NewLogoutReply() *LogoutReply {
	return &LogoutReply{}
}

type User struct {
	Id     int64
	Name   string
	Locked bool
}

func NewUser() *User {
	return &User{}
}

func (m *User) GetId() (data int64) {
	if m == nil {
		return
	}
	data = m.Id
	return
}

func (m *User) SetId(val int64) {
	if m == nil {
		return
	}
	m.Id = val
}

func (m *User) GetName() (data string) {
	if m == nil {
		return
	}
	data = m.Name
	return
}

func (m *User) SetName(val string) {
	if m == nil {
		return
	}
	m.Name = val
}

func (m *User) GetLocked() (data bool) {
	if m == nil {
		return
	}
	data = m.Locked
	return
}

func (m *User) SetLocked(val bool) {
	if m == nil {
		return
	}
	m.Locked = val
}

type DemoServiceInterface interface {
	Login(in *LoginRequest, out *LoginReply) error
	Logout(in *LogoutRequest, out *LogoutReply) error
}

func (s *server) RegisterDemoService(svc DemoServiceInterface) {
	s.services["Demo"] = svc
}

type DemoClient struct {
	client *rpc.Client
}

func NewDemoClient(network, addr string) (*DemoClient, error) {
	conn, err := rpc.Dial(network, addr)
	if err != nil {
		return nil, err
	}
	return &DemoClient{
		client: conn,
	}, nil
}

var _ DemoServiceInterface = (*DemoClient)(nil)

func (c *DemoClient) Login(in *LoginRequest, out *LoginReply) error {
	return c.client.Call("Demo.Login", in, out)
}

func (c *DemoClient) Logout(in *LogoutRequest, out *LogoutReply) error {
	return c.client.Call("Demo.Logout", in, out)
}

type server struct {
	services map[string]any
}

func NewServer() *server {
	return &server{
		services: make(map[string]any, 1),
	}
}

func (s *server) Run(network, addr string) error {
	for name, svc := range s.services {
		if err := rpc.RegisterName(name, svc); err != nil {
			return nil
		}
	}
	lis, err := net.Listen(network, addr)
	if err != nil {
		return err
	}
	for {
		conn, err := lis.Accept()
		if err != nil {
			log.Fatalf("[ERROR]: accept connection failed because of %v", err.Error())
		}
		go func() {
			rpc.ServeConn(conn)
			defer conn.Close()
		}()
	}
}
